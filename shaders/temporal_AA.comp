#version 450 core

#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable

#include "shaders_common.h"

layout (set=3, binding=1)        uniform texture2D   velocity;
layout (set=3, binding=2)        uniform texture2D   color_buffer;
layout (set=3, binding=3)        uniform texture2D   history;
layout (set=3, binding=4, rgba8) uniform image2D     taa_output;

layout (set=3, binding=0, std140) uniform PassUniform
{
    vec4 alpha;
} passUniform;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = (vec2(coords) + 0.5) / GetViewportSize();
	vec2 vel = SampleTexture(velocity, GetSamplerNearest(), uv).xy;
	vec2 uv_prev = uv - vel;

    vec3 hist_sample = SampleTexture(history, GetSamplerLinear(), uv_prev).rgb;
    vec3 current = SampleTexture(color_buffer, GetSamplerNearest(), uv).rgb;
	
	vec2 uv_delta = vec2(1, 1) / GetViewportSize();
	
	vec3 rgb_aabb[2];
	for(int x = -1; x < 2; x++) {
		for(int y = -1; y < 2; y++) {
			vec3 neighborhood = SampleTexture(color_buffer, GetSamplerLinear(), uv + uv_delta * vec2(x, y)).rgb;
			rgb_aabb[0] = min(rgb_aabb[0], neighborhood);
			rgb_aabb[1] = max(rgb_aabb[1], neighborhood);
		}
	}
	
	vec3 rectified_history = max(hist_sample, rgb_aabb[0]);
	rectified_history = min(rectified_history, rgb_aabb[1]);
	
	float alpha = passUniform.alpha.x;
    vec3 result = mix(current, rectified_history, alpha);

    imageStore(taa_output, coords, vec4(result, 1.0));
}