#version 450 core

#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable

#include "shaders_common.h"
#include "shaders_defines.h"

layout(set = 3, binding = 0, rgba32f) uniform image2D butterflyTexture;

layout(set = 3, binding = 1, rg32f) uniform image2D fftInput;
layout(set = 3, binding = 2, rg32f) uniform image2D fftOutput;

layout(set = 3, binding = 3, std140) uniform Data
{
	vec4 isVertical_stage;
	
} data;

struct complex
{
	float r;
	float i;
};

complex add(complex lhs, complex rhs)
{
	return complex(lhs.r + rhs.r, lhs.i + rhs.i);
}

complex multiply(complex lhs, complex rhs)
{
	return complex(lhs.r * rhs.r - lhs.i * rhs.i, lhs.r * rhs.i + lhs.i * rhs.r);
}

complex conjugate(complex x)
{
	return complex(x.r, -x.i);
}

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
	ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
	
	bool isVertical = data.isVertical_stage.x > 0.5;
	float stage = data.isVertical_stage.y;
	
	if(isVertical)
	{
		vec4 butterflyData = imageLoad(butterflyTexture, ivec2(stage, coords.y));
		vec2 paramsCoords = butterflyData.zw;
		complex w = complex(butterflyData.x, butterflyData.y);
		
		vec2 inp0 = imageLoad(fftInput, ivec2(coords.x, paramsCoords.x)).xy;
		vec2 inp1 = imageLoad(fftInput, ivec2(coords.x, paramsCoords.y)).xy;
		
		complex G = complex(inp0.x, inp0.y);
		complex H = complex(inp1.x, inp1.y);
		
		complex result = add(G, multiply(w, H));
		
		imageStore(fftOutput, coords, vec4(result.r, result.i, 0.0, 0.0));
	}
	else 
	{
		vec4 butterflyData = imageLoad(butterflyTexture, ivec2(stage, coords.x));
		vec2 paramsCoords = butterflyData.zw;
		complex w = complex(butterflyData.x, butterflyData.y);
		
		vec2 inp0 = imageLoad(fftInput, ivec2(paramsCoords.x, coords.y)).xy;
		vec2 inp1 = imageLoad(fftInput, ivec2(paramsCoords.y, coords.y)).xy;
		
		complex G = complex(inp0.x, inp0.y);
		complex H = complex(inp1.x, inp1.y);
		
		complex result = add(G, multiply(w, H));
		
		imageStore(fftOutput, coords, vec4(result.r, result.i, 0.0, 0.0));
	}
	
}